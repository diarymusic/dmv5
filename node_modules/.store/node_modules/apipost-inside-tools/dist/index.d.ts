interface IData {
    swaggerApis: Array<any>;
    localApis: Array<any>;
    auto_import_id: string;
    import_folder_id: string;
    import_project_id: string;
    cover_modal: 'url' | 'uniqueUrl' | 'bothUrl' | 'urlAndFolder';
    handleCoverData(importData: Object, localData: Object, cover_modal: 'url' | 'uniqueUrl' | 'bothUrl' | 'urlAndFolder'): Promise<any>;
}
interface IResult {
    saveList: Array<any>;
    deleteList: Array<any>;
}

declare const _default: {
    import2array: (str: string, type?: string) => {
        description: any;
        is_checked: number;
        key: any;
        type: string;
        not_null: number;
        field_type: any;
        value: string;
    }[];
    export2str: (apipostArr: any[], type?: string) => string;
    importdesc2array: (str: string, type?: string) => {
        key: string;
        description: string;
    }[];
    exportdesc2str: (apipostArr: any[], type?: string) => string;
    objectArr2uniqueArr: (arr: any[]) => any[];
    har2apipost: (har: any) => any;
    isElectron: () => boolean;
    setCookie: (name: string, value: string, host?: string | undefined, expiredays?: number | undefined) => void;
    getCookie: (name: string) => string;
    ConvertResult: (status: string, message: string, data: any) => {
        status: string;
        message: string;
        data: any;
    };
    getCachePath: () => string | undefined;
    isXml: (val: any) => boolean;
    apipost2exportApipost: (apipostObj: any) => {
        status: string;
        data: any;
    } | undefined;
    str2testDataAsync: (str: string) => Promise<any>;
    importSwaggerHandle: (data: IData) => Promise<IResult>;
    apipost2exportSwagger: (apipostObj: any, version: string) => {
        status: string;
        data: any;
    } | undefined;
};

export { _default as default };
